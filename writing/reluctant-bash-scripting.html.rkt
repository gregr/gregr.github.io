(define title "Bash scripting for the reluctant")
(match-define (list ref anchor-list)
  (anchors `(
    (robust-bash "Writing Robust Bash Shell Scripts" "http://www.davidpashley.com/articles/writing-robust-shell-scripts/")
    (bh-pathname-expansion "Pathname expansion (globbing)" "http://wiki.bash-hackers.org/syntax/expansion/globs")
    (unix-se-printf-vs-echo "Why is printf better than echo?" "https://unix.stackexchange.com/questions/65803/why-is-printf-better-than-echo")
    (so-bash-special-vars "What are the special dollar sign shell variables?" "https://stackoverflow.com/a/5163260")
    (so-script-dir "Can a Bash script tell what directory it's stored in?" "http://stackoverflow.com/a/246128")
    (so-parse-args "How do I parse command line arguments in bash?" "http://stackoverflow.com/a/14203146")
    (beg-bash-input "Catching user input" "http://tldp.org/LDP/Bash-Beginners-Guide/html/sect_08_02.html")
    (adv-bash-cmd-subst "Command Substitution" "http://www.tldp.org/LDP/abs/html/commandsub.html")
    (adv-bash-proc-subst "Process Substitution" "http://tldp.org/LDP/abs/html/process-sub.html")
    (adv-bash-exec "Using exec" "http://tldp.org/LDP/abs/html/x17974.html")
    (lpg-fifo "Named Pipes (FIFOs - First In First Out)" "http://www.tldp.org/LDP/lpg/node15.html")
    (adv-bash-heredoc "Here Documents" "http://tldp.org/LDP/abs/html/here-docs.html")
    (matt-might-relational-shell "Relational shell programming" "http://matt.might.net/articles/sql-in-the-shell/")
    (adv-bash-jobs "Job Control Commands" "http://tldp.org/LDP/abs/html/x9644.html")
    (so-flock "How to prevent a script from running simultaneously?" "http://stackoverflow.com/a/169969")
    (matt-might-ssh "SSH: More than secure shell" "http://matt.might.net/articles/ssh-hacks/")
  )))
(define (code-block/bash source) (code-block/pandoc "bash" source))
(define (local-code filename)
  (local-code-file/pandoc "bash"
    (build-path "writing/reluctant-bash-scripting/" filename)))
(list title
  (writing-content
    title
    (nav-local `(
      ("audience" "Target Audience")
      ("concepts-techniques" "Concepts and techniques"
       (("write-robust-scripts" "Writing robust scripts")
        ("printf-instead-of-echo" "Use printf instead of echo")
        ("special-params-vars" "Special parameters and variables")
        ("script-relative-paths" "Script-relative paths")
        ("pass-by-name" "Passing arguments by name")
        ("input-output" "Input and output")
        ("concurrency" "Concurrency")
        ("effective-ssh" "Effective use of ssh")
        ))
      ("referenced-links" "All the links")
      ))
    `(section
       ,(date-range "October 25, 2014" "May 27, 2016")
       )
    `(section
       ((class "summary"))
       ,(anchor-target "audience")
       (h2 "Should I read this?")
       (p "This is a consolidated reference for helping those already familiar with bash to become more comfortable with it in order to leverage its strengths.  It links to informative references that explain their subject matter better than I can.")
       )
    `(section
       ,(anchor-target "concepts-techniques")
       (h2 "Concepts and techniques")
       (section
         ,(anchor-target "write-robust-scripts")
         (h3 "Writing robust scripts")
         (p "There are several options for configuring bash to behave more sanely in the presence of surprises.  Some commands also have options for running in a more fail-friendly manner.")
         (ul
           (li ,(code-frag "set -u") " or " ,(code-frag "set -o nounset"))
           (li ,(code-frag "set -e") " or " ,(code-frag "set -o errexit"))
           (li ,(code-frag "set -o pipefail"))
           (li ,(code-frag "mkdir -p"))
           (li ,(code-frag "rm -f"))
           (li "quoting variable references, as in: " ,(code-frag "\"$@\""))
           (li ,(code-frag "find -print0 ... | xargs -0 ..."))
           (li ,(code-frag "trap"))
           (li ,(code-frag "set -o noclobber"))
           )
         (p "If anything in this list falls outside of your comfort zone, read " ,(ref 'robust-bash "this") " before continuing.")
         (p "Also, unless your script intentionally makes use of " ,(ref 'bh-pathname-expansion "pathname expansion (aka globbing)") ", you should disable it via " ,(code-frag "set -f") ".  If you do make use of globbing, you should use " ,(code-frag "shopt -s failglob") " to produce errors for non-matching patterns.")
         )
       (section
         ,(anchor-target "printf-instead-of-echo")
         (h3 "Use printf instead of echo")
         (p "There are serious " ,(ref 'unix-se-printf-vs-echo "portability concerns") " with using " ,(code-frag "echo") " that can lead to nasty surprises.  Use the basic feature set of " ,(code-frag "printf") " instead:")
         (p ,(code-frag "printf '%s\\n' \"$var\""))
         )
       (section
         ,(anchor-target "special-params-vars")
         (h3 "Special parameters and variables")
         (p "It's not important to memorize what " ,(code-frag "$-") ", " ,(code-frag "$_") ", etc. are for, but make sure " ,(ref 'so-bash-special-vars "this list") " doesn't contain any surprises.  You should also be familiar with " ,(code-frag "$PPID") " which is used to get the current parent process ID.")
         )
       (section
         ,(anchor-target "script-relative-paths")
         (h3 "Script-relative paths")
         (p "If your script is bundled with accompanying files, you will want to reference the paths of these files in terms of the current script's location.  Doing so allows you to both " (strong "relocate the bundle") " and " (strong "invoke the script from anywhere") " without breaking any of the relative file references.  Read " ,(ref 'so-script-dir "this") " for more options and detail.")
         (p ,(local-code "dir-example"))
         )
       (section
         ,(anchor-target "pass-by-name")
         (h3 "Passing arguments by name")
         (p "Passing arguments by name (or keyword), rather than position, makes them self-documenting.  When passing by position, it's easier to mistakenly transpose two arguments.")
         (p "A " (strong "typical solution") " to processing script arguments is to " (strong "use something like " ,(ref 'so-parse-args (code-frag "getopts"))) ".")
         (p "An " (strong "alternative way") " to pass arguments by name is to " (strong "assign them to variables") ".")
         (p ,(local-code "var-arg-example"))
         (p ,(local-code "var-arg-example-invoke"))
         (p "There is a " (strong "trade-off being made with regard to name clashes") ".  The upside is using global variable parameters allows arguments to either be explicitly passed inline, or to be exported and used across multiple invocations with the option of overriding them.  The downside is the potential for unintentional name clashes with existing global variables.")
         )
       (section
         ,(anchor-target "input-output")
         (h3 "Input and output")
         (p "Manipulation of standard I/O in bash is somewhat indirect.  Unless using redirections, stdio is " (strong "implicitly consumed/produced by subcommands") ".  Here are some useful formulas.")
         (ul
           (li (p "Consume part of stdin, assigning to variables, using " ,(ref 'beg-bash-input (code-frag "read")) ".")
               ,(code-block/bash "> read -n 3 threechars  # Your input ends on the same line as the next prompt.\nabc> printf '%s\\n' \"$threechars\"\nabc")
               ,(code-block/bash "> read line  # This time, the next prompt starts on its own line.  Why?\n#this input is read until you hit enter\n> printf '%s\\n' \"$line\"\n#this input is read until you hit enter")
               )
           (li (p "Consume all of stdin using " ,(code-frag "cat") ".")
               ,(code-block/bash "ALL_OF_STDIN=$(cat)  # this also demonstrates command-substitution\n... use $ALL_OF_STDIN ...")
               )
           (li (p "Consume all of stdin, writing it to a file while also sending it to stdout using " ,(code-frag "tee") ".")
               ,(code-block/bash "# Here is another use of tee.\nprintf '%s\\n' 'important config' | sudo tee /etc/normally-cannot-write-here > /dev/null\n\n# Note that the following will *not* normally succeed.\nsudo printf '%s\\n' 'important config' > /etc/normally-cannot-write-here")
               )
           (li (p "Capture the stdout of a command as a string with " ,(ref 'adv-bash-cmd-subst "command substitution") ".")
               ,(code-block/bash "printf '%s\\n' \"Today is $(date)\"")
               )
           (li (p "Treat a the I/O of a command like a file (more accurately, like a pipe) with " ,(ref 'adv-bash-proc-subst "process substitution") ".")
               ,(code-block/bash "diff data <(uniq data)")
               )
           (li (p "Redirect the current script's standard I/O using " ,(ref 'adv-bash-exec (code-frag "exec")) ".  More generally, use " ,(ref 'adv-bash-exec (code-frag "exec")) " to manipulate arbitrary file descriptors.")
               ,(code-block/bash "printf '%s\\n' 'this goes to stdout'\nexec > some-file\nprintf '%s\\n' 'this goes to some-file'")
               )
           (li (p "Flexibly tie the I/O of processes together using " ,(ref 'lpg-fifo "named pipes") ".")
               ,(local-code "fifo-example")
               )
           (li (p "Describe input in-situ using " ,(ref 'adv-bash-heredoc "'here documents'") ".")
               ,(local-code "heredoc-example")
               )
           (li (p "Manipulate an entire directory tree as a stream using " ,(code-frag "tar") ".")
               ,(code-block/bash "tar cpvf - DIR -C ORIGIN | ssh -T -e none REMOTE-HOST 'tar xvf - -C DESTINATION'")
               )
           )
         (p "You should also read about " ,(ref 'matt-might-relational-shell "relational") " text processing.")
         )
       (section
         ,(anchor-target "concurrency")
         (h3 "Concurrency")
         (p "Append a " ,(code-frag "&") " to a command to run it concurrently with the remainder of a script's execution.  Pause the script's execution until the child processes terminate using " ,(code-frag "wait") ".")
         ,(local-code "concurrency-example")
         (p "Here is an example demonstrating more interaction with a child process.")
         ,(local-code "child-proc-example")
         (p "Read more about these and other " ,(ref 'adv-bash-jobs "job control") " commands.")
         (p "Avoid running multiple instances of a command at the same time by using " ,(ref 'so-flock (code-frag "flock")) ".")
         ,(local-code "cron-flock-example")
         )
       (section
         ,(anchor-target "effective-ssh")
         (h3 "Effective use of ssh")
         (p "The " ,(code-frag "ssh") " command is more than just a way to interactively log into a remote host.  It allows remote command execution, transferring files, and various forms of proxying.  ",(ref 'matt-might-ssh "This") " explains more.")
         )
       )
    `(section
       ,(anchor-target "referenced-links")
       (h2 "All of the above links")
       ,(anchor-reference anchor-list)
       )
    ))
